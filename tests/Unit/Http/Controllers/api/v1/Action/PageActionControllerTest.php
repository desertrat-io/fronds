<?php

namespace Tests\Unit\Http\Controllers\api\v1\Action;

use Faker\Provider\Uuid;
use Fronds\Lib\Constants\ExceptionConstants;
use Fronds\Lib\Exceptions\Data\FrondsCreateEntityException;
use Fronds\Services\ContentServices\PageService;
use Fronds\Models\Page;
use Tests\TestCase;

class PageActionControllerTest extends TestCase
{

    private $pageServiceMock;

    public function setUp(): void
    {
        parent::setUp();
        $this->pageServiceMock = $this->mock(PageService::class);
    }

    /**
     * @throws \Throwable
     */
    public function tearDown(): void
    {
        Page::truncate();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testPageActionIndex(): void
    {
        $response = $this->getJson('/api/v1/page');
        $response->assertOk()
            ->assertExactJson([
                'message' => '',
                'data' => []
            ]);
    }

    public function testPageViewSingle(): void
    {
        $response = $this->get('/api/v1/page/1');
        $response->assertOk();
        $response->assertExactJson([
            'message' => '',
            'data' => []
        ]);
    }

    public function testPageActionStoreMissingAll(): void
    {
        // add no data to the request
        $response = $this->postJson('/api/v1/page');
        $response->assertStatus(422);
        $response->assertExactJson([
            'message' => 'The given data was invalid.',
            'errors' => [
                'title' => [
                    __('validation.custom.title.required')
                ],
                'slug' => [
                    __('validation.custom.slug.required')
                ],
                'layout' => [
                    __('validation.custom.layout.required')
                ]
            ]
        ]);
    }

    public function testPageActionStoreInvalidSlug(): void
    {
        $this->pageServiceMock->shouldReceive('addNewPage')
            ->with([
                'title' => 'a title',
                'slug' => 'a title',
                'layout' => 'full-width'
            ])
            ->andReturn(Uuid::uuid());
        $response = $this->postJson('/api/v1/page', [
            'title' => 'a title',
            'slug' => 'a title',
            'layout' => 'full-width'
        ]);
        $response->assertStatus(422);
        $response->assertExactJson([
            'message' => 'The given data was invalid.',
            'errors' => [
                'slug' => [
                    'Invalid slug format'
                ]
            ]
        ]);
    }

    public function testPageActionStoreDuplicateSlug(): void
    {
        factory(Page::class)->create([
            'slug' => 'dupe-me'
        ]);
        $response = $this->postJson('/api/v1/page', [
            'title' => 'dupe me',
            'slug' => 'dupe-me',
            'layout' => 'full-width'
        ]);
        $response->assertStatus(422);
        $response->assertExactJson([
            'message' => 'The given data was invalid.',
            'errors' => [
                'slug' => [
                    __('validation.custom.slug.unique')
                ]
            ]
        ]);
    }

    public function testPageActionStoreValidPage(): void
    {
        $pageId = Uuid::uuid();
        $this->pageServiceMock->shouldReceive('addNewPage')
            ->with([
                'title' => 'test title',
                'slug' => 'test-title',
                'layout' => 'full-width'
            ])
            ->andReturn($pageId);
        $response = $this->postJson('/api/v1/page', [
            'title' => 'test title',
            'slug' => 'test-title',
            'layout' => 'full-width'
        ]);
        $response->assertCreated();
        $response->assertExactJson([
            'message' =>  __('widgets.action.panels.pages.responses.add'),
            'data' => [
                'page_id' => $pageId
            ]
        ]);
    }

    public function testPageCreationException(): void
    {
        $this->pageServiceMock->shouldReceive('addNewPage')
            ->with([
                'title' => 'test title',
                'slug' => 'test-title',
                'layout' => 'full-width'
            ])
            ->andThrow(FrondsCreateEntityException::class, 'Could not create page, see logs for details');

        $response = $this->postJson('/api/v1/page', [
            'title' => 'test title',
            'slug' => 'test-title',
            'layout' => 'full-width'
        ]);
        $response->assertStatus(500);
        $response->assertExactJson([
            'message' => 'Could not create page, see logs for details',
            'data' => [
                'error_code' => ExceptionConstants::COULD_NOT_CREATE
                    | ExceptionConstants::FRONDS_DATA
                    | ExceptionConstants::FRONDS_HALT,
                'message' => 'Could not create page, see logs for details'
            ]
        ]);
    }

    public function testPageUpdateInvalidId(): void
    {
        $response = $this->putJson('/api/v1/page/1', [
            'page' => null,
            'title' => 'test title',
            'slug' => 'test-title',
            'layout' => 'full-width'
        ]);
        $response->assertStatus(422);
        $response->assertExactJson([
            'message' => 'The given data was invalid.',
            'errors' => [
                'page' => [
                    __('validation.custom.page.uuid')
                ]
            ]
        ]);
    }

    public function testPageActionUpdateMissingAll(): void
    {
        // add no data to the request
        $response = $this->putJson('/api/v1/page/1');
        $response->assertStatus(422);
        $response->assertExactJson([
            'message' => 'The given data was invalid.',
            'errors' => [
                'title' => [
                    __('validation.custom.title.required')
                ],
                'slug' => [
                    __('validation.custom.slug.required')
                ],
                'layout' => [
                    __('validation.custom.layout.required')
                ]
            ]
        ]);
    }

    public function testPageActionUpdateInvalidSlug(): void
    {
        $response = $this->putJson('/api/v1/page/1', [
            'page' => Uuid::uuid(),
            'title' => 'a title',
            'slug' => 'a title',
            'layout' => 'full-width'
        ]);
        $response->assertStatus(422);
        $response->assertExactJson([
            'message' => 'The given data was invalid.',
            'errors' => [
                'slug' => [
                    'Invalid slug format'
                ]
            ]
        ]);
    }

    public function testPageActionUpdateDuplicateSlug(): void
    {
        factory(Page::class)->create([
            'slug' => 'dupe-me'
        ]);
        $response = $this->putJson('/api/v1/page/1', [
            'page' => Uuid::uuid(),
            'title' => 'dupe me',
            'slug' => 'dupe-me',
            'layout' => 'full-width'
        ]);
        $response->assertStatus(422);
        $response->assertExactJson([
            'message' => 'The given data was invalid.',
            'errors' => [
                'slug' => [
                    __('validation.custom.slug.unique')
                ]
            ]
        ]);
    }

    public function testPageUpdateValidId(): void
    {
        $response = $this->putJson('/api/v1/page/1', [
            'page' => Uuid::uuid(),
            'title' => 'test title',
            'slug' => 'test-title',
            'layout' => 'full-width'
        ]);
        $response->assertOk();
        $response->assertExactJson([
            'message'=> '',
            'data' => []
        ]);
    }

    public function testPageDeleteMissingId(): void
    {
        $response = $this->deleteJson('/api/v1/page');

        $response->assertStatus(405);
        $response->assertExactJson([
            'message'=> 'The DELETE method is not supported for this route. Supported methods: GET, HEAD, POST.'
        ]);
    }

    public function testPageDelete(): void
    {
        $response = $this->delete('/api/v1/page/1', [
            'page' => Uuid::uuid()
        ]);

        $response->assertOk();
        $response->assertExactJson([
            'message'=> '',
            'data' => []
        ]);
    }
}
