<?php

namespace Tests\Unit\Repositories;

use Fronds\Lib\Exceptions\Data\FrondsEntityNotFoundException;
use Fronds\Lib\Exceptions\FrondsException;
use Fronds\Lib\Exceptions\Usage\FrondsIllegalArgumentException;
use Fronds\Models\User;
use Fronds\Repositories\User\UserRepository;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * Class FrondsRepositoryTest
 *
 * @package Tests\Unit\Repositories
 * @author  Mike Lawson <mike@desertrat.io>
 * @license MIT https://opensource.org/licenses/MIT
 */
class FrondsRepositoryTest extends TestCase
{

    use RefreshDatabase;
    /**
     * @var UserRepository
     */
    private $repository;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->repository = resolve(UserRepository::class);
    }

    public function testGenericGetByIdValid(): void
    {
        // any repository is fine
        $user = factory($this->repository->getModelClass())->create();
        $userFromAbstractParent = $this->repository->getById($user->id);
        self::assertEquals($user->id, $userFromAbstractParent->id);
    }

    public function testGenericGetByIdInvalid(): void
    {
        $this->expectException(FrondsEntityNotFoundException::class);
        $this->expectExceptionMessage('No entity found by that id');
        $this->repository->getById('thisisnoteveravalidid');
    }

    public function testGenericGetAllDefault(): void
    {
        self::markTestSkipped('Investigating issue with persistence');
        $result = $this->repository->getAll();
        self::assertCount(0, $result);
        $models = factory($this->repository->getModelClass(), 5)->create();

        self::assertInstanceOf($this->repository->getModelClass(), $this->repository->getAll()->first());
        self::assertCount(5, $this->repository->getAll());
    }

    public function testGetAllSort(): void
    {
        self::markTestSkipped('Investigating issue with persistence');
        $models = factory($this->repository->getModelClass(), 5)->create();
        $resultDesc = $this->repository->getAll(['*'], ['column' => 'email', 'dir' => 'desc']);
        $filteredColl = $models->sortByDesc('email')
            ->filter(static function (User $user, $index) use ($resultDesc) {
                return $user->email === $resultDesc->get($index)->email;
            });
        self::assertCount(5, $filteredColl);

        $models = facdtory($this->repository->getModelClass(), 5)->create();
        $resultAsc = $this->repository->getAll(['*'], ['column' => 'email', 'dir' => 'asc']);
        $filteredColl = $models->sortBy('email')
            ->filter(static function (User $user, $index) use ($resultAsc) {
                return $user->email === $resultAsc->get($index)->email;
            });
        self::assertCount(5, $filteredColl);
    }

    public function testGetAllLimit(): void
    {
        $models = factory($this->repository->getModelClass(), 5)->create();
        $result = $this->repository->getAll(['*'], ['column' => 'email', 'dir' => 'asc'], 2);
        self::assertEquals(2, $result->count());
        self::assertLessThanOrEqual($models->count(), $result->count());
    }

    public function testGetAllException(): void
    {
        $this->expectException(FrondsIllegalArgumentException::class);
        $this->expectExceptionMessage('Order By column not specified');
        $this->repository->getAll(['*'], ['notcolumn' => 'abc', 'dir' => 'asc']);
        $this->expectException(FrondsIllegalArgumentException::class);
        $this->expectExceptionMessage('Order By direction not specified');
        $this->repository->getAll(['*'], ['column' => 'email', 'notdir' => 'asc']);
    }

    public function testGetAllPaginatedInvalidPageSize(): void
    {
        $this->expectException(FrondsIllegalArgumentException::class);
        $this->expectExceptionMessage('Invalid page size. Should be greater than or equal to 0');
        $this->repository->getAllPaginated(['*'], -1);
    }

    public function testGetAllPaginatedDefaultPageSize(): void
    {
        factory($this->repository->getModelClass(), 15)->create();
        $result = $this->repository->getAllPaginated();
        self::assertLessThan(15, $result->perPage());
    }
}
